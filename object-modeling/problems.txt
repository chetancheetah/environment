General REST API thought-design guidelines (Free Form)
------------------------------------------
Use RESTful URLs and actions



- Identify what what you can make into a resource and what you can’t (This is influenced by your OO design)

- Are there things you want to include that are not CRUD based? E.g. Search. How will you do those?

- Will you consider Json for input, or will url encoding suffice?



Design the responses



- Gzip?

- Filter/Sort/Search/specific-parameters

- How will you handle timestamps (created, last updated etc)

- Overall limiting of output

Pagination?
Rate limiting?
- Error Handling

Error codes


Authentication and SSL



Caching

- Last modified or Etag?



Versioning

File System (Free Form)
------------------------------------------
Vague, high-level problem statement, as delivered in an interview: Design/Model a File System



What that typically means: Think of a basic file system. Now model it in software. You could think of Unix to make your initial design, but your solution should be sufficiently generic. Identify different entities and create classes for them. Put state in those classes and show relationships.



Deliverables:



1. A class diagram, showing relationships with each other where appropriate. Classes should show state and methods. Use any convenient notation. UML is more widely known.

2. Main() method, showing how you'll initialize your system and start using it.

3. Identify the design pattern



API:



Create a file system API



Start simple, CRUD based first. Don’t try and model it after Linux, because Linux is very complex and is not REST based. Model it after an online file system (think Box or GDrive)

Follow general REST API thought design guidelines


Tic Tac Toe (Free Form)
------------------------------------------
Vague, high-level problem statement, as delivered in an interview: Design/Model a tic tac toe game.



What that typically means: Design a software library for a 3x3 Tic-Tac-Toe game. Your users are 3rd party developers, who will use your library and implement the UI of the said game.



There is no need to design the UI.
Unless the interviewer asks explicitly, to begin with, there is no need to implement the actual algorithm to identify the game state. Just identify the right method where it should exist.
It is important however, to identify the right data-structure to store and parse game state. It could be a matrix.


Deliverables:



1. A class diagram, showing relationships with each other where appropriate. Classes should show state and methods. Use any convenient notation. UML is more widely known.

2. Main() method, showing how you'll initialize your system and start using it.

3. Identify the design pattern.



API:



Create a game API to make moves against a computer player



Start finite viz. 3x3 and two players. Don’t even think about anything more complex.
There is no need to identify what algorithm the computer would use, to make moves against the player. We just need the scaffolding.
Follow general REST API thought design guidelines


Deck of Cards (Free Form)
------------------------------------------

Vague, high-level problem statement, as delivered in an interview: Design/Model a Deck of cards



What that typically means: Start with a simplified standard deck of cards. Such a deck has 4 suits(Diamond, Spade, Club, Heart) and 13 cards of each suit (1 to 13). Now design a library, which can be used by a 3rd party developer, to design a simple card game.



Deliverables:



1. A class diagram, showing relationships with each other where appropriate. Classes should show state and methods. Use any convenient notation. UML is more widely known.

2. Main() method, showing how you'll initialize your system and start using it.

3. Identify the design pattern.



API:

Similar to any game e.g. Tic Tac Toe

Musical Jukebox (Free Form)
------------------------------------------
Vague, high-level problem statement, as delivered in an interview: Design/Model a musical jukebox



What that typically means:



Design a simple jukebox that plays different types of media. Make simplifying assumptions to begin with, e.g. assume that there is only one disk-type, and that it has a few songs. Extend it to have multiple media types and even playlists.



“A true jukebox refers to a machine that plays songs derived from a collection of music held within the unit itself. This music can be stored on all types of media format including records, Cds and more recently digital. In both a home and coin operated scenario the jukeboxes play songs selected by pressing a combination of buttons pinpointing the location and track number in relation to Records and Cds or the album name and tack number when dealing with digital music.”



If you have not seen a Jukebox, this is what it looks like: https://www.youtube.com/watch?v=f2GBNafHceY



Deliverables:



1. A class diagram, showing relationships with each other where appropriate. Classes should show state and methods. Use any convenient notation. UML is more widely known.

2. Main() method, showing how you'll initialize your system and start using it.

3. Identify the design pattern.



API:



API here is quite simplistic. It’s mostly READ and variants of READ.



A more interesting extension to design, is an online music service e.g. Spotify or SoundCloud.

Restaurant Reservation System (Free Form)
------------------------------------------
Vague, high-level problem statement, as delivered in an interview: Design/Model a table reservation system for a restaurant.



What that typically means: Imagine you are hired by a restaurant to design a system of table-reservation. You have to design the core API for various clients (Web, Mobile, Tablets etc).



For main of the product, think about use-cases of booking (a new table), cancellation of reservation, and meal ending. Assume some average meal time, say 30 minutes. Don’t work with other stuff at the get go e.g. size of the party, table switching, how long to wait etc. is not required in first pass. Add those things after first pass is done.



Deliverables:



1. A class diagram, showing relationships with each other where appropriate. Classes should show state and methods. Use any convenient notation. UML is more widely known.

2. Main() method, showing how you'll initialize your system and start using it.

3. Identify the design pattern.



API:



API here is interesting, especially as you try to bring it closer to what a real world system looks like. E.g. if you are considering families of different sizes coming to dine, you will need to maintain table capacity also. And separate queues per family-size for wait times.



Extend this by doing this for a bulk of restaurants. E.g. OpenTable API. You will mainly need to add a Directory layer of Restaurants (so that the user can first pick a good restaurant, and then reserve a table).



To make this even more interesting, model a restaurant that also offers delivery (in addition to dine-in) and then create API endpoints for that service.

Design a cache (single server) (Free Form)
-------------------------------------------------------
[This problem may have been done in the class. Whatever the instructor taught you supersedes the following]



Main parts to ponder:



Eviction strategy (FIFO, LRU, LFU)
Access pattern (Write through, write-around, write back)
Size, based on use-case
Concurrency
Prefer Low Latency and High Availability, over. Consistency. Low latency is very imp in caching.


Reading pointers:

Nothing fancy. A more interesting question follows (distributed).

Design a Distributed cache (e.g. memcached) (Free Form)
-------------------------------------------------------
[This problem may have been done in the class. Whatever the instructor taught you supersedes the following]



Read up on single-server cache first
Distributed cache needs multiple shards (server). How many shards are required depends on what is the most QPS you can handle on a single machine. For memcached, one of the most popular distributed caches, it's 50KQPS default. 
Distributed/Consistent hashing is a good mechanism to implement a distributed cache.


Important: In an interview, it is fair game to be asked to code a basic distributed hashing mechanism e.g. consistent hashing (see links below).



It is likely, that you may be asked to "design memory cache". That doesn't mean "memcached", the popular distributed cache. "memory cache" is just a lazy way of saying - design cache on a single server and then think about distributed. Mostly distributed. 


Reading pointers:



This one is AMAZING: http://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/



https://www.quora.com/Whats-the-maximum-throughput-in-queries-per-second-for-memcached-with-small-object-sizeshttp://www.tom-e-white.com/2007/11/consistent-hashing.html

https://ivoroshilin.wordpress.com/2013/07/15/distributed-caching-under-consistent-hashing/ [Java code]



Numbers every engineer should know: https://gist.github.com/jboner/2841832

URL Shortener (Free Form)
-------------------------------------------------------
Design a URL-shortening service, like Bit.ly, or tinyURL



URL Shorteners will take a URL and shorten it, and vice-versa
The system is intended to be designed for a large number of URLs.
Don't forget to discuss storage requirements and caching


Reading pointers:



http://www.quora.com/What-is-the-architecture-of-a-scalable-URL-shortener
http://blog.codinghorror.com/url-shortening-hashes-in-practice/
http://www.tawheedkader.com/2012/03/how-to-hire-a-hacker-for-your-startup/


Chat (messenger) Server (Free Form)
-------------------------------------------------------
Design a messenger service like Whatsapp, or Facebook Messenger



What are the challenges associated with this service?
What patterns and frameworks would you use, to scale this service?
Focus on main use cases of messaging with reliable delivery at scale


Reading pointers:



https://www.facebook.com/notes/facebook-engineering/building-facebook-messenger/10150259350998920/
http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html


Netflix Streaming (Free Form)
-------------------------------------------------------
Design a content streaming product like Netflix



How would you solve the problem of being able to stream different types of content simultaneously across millions of different types of device platforms with different network conditions (3G/4G/Wifi)?
Aspects to think about : content ingestion, data serving, real time playback with QOS management


Reading pointers:



http://blog.eltrovemo.com/600/how-to-build-a-netflix-like-multiscreen-ott-service-part-1/
Infrastructure presentation by Adrian Cockcroft: https://www.slideshare.net/adrianco/netflix-global-cloud

Photo Sharing (Free Form)
-------------------------------------------------------
Design a photo-sharing service like Instagram



1. Ability for a user to share images and other users to follow and discover images

2. Search and discovery are important.



Reading pointers:



Not much info out there, except this one: http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html

Twitter! (Free Form)
-------------------------------------------------------
Design Twitter User/Follower model



Twitter has users and users have followers
Build the data model for the above
What queries would I need to determine followers for a particular user?
How would you scale this system when there are certain users that have millions of followers whereas certain users only have a few (<100) users?
How would you use the Twitter user/follower system to build a userâ€™s home timeline? Account for celebrities who have millions of followers where their tweets should reach all followers in near real time.


Reading pointers:



http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html



Recommendation System (Free Form)
-------------------------------------------------------
Design a movie recommendation system like Netflix



Design a recommendation system for recommending relevant content to users on Netflix
Propose a couple of algorithms/models would you use for building a recommendation system [Hint: use a collaborative filtering algorithm]
Assume we have several billion item ratings from members
Each item in our catalog has rich metadata such as actors, director, genre, parental rating, or reviews
Focus on main use cases : cold start problem, displaying recommendations to users


Reading pointers:



http://xavier.amatriain.net/pubs/BigAndPersonal.pdf

https://en.wikipedia.org/wiki/Netflix_Prize [This competition was all about building a recommendation engine for Netflix]



Unique ID Generator (Free Form)
-------------------------------------------------------
Design a random/unique ID [or Design a Ticket Server]



You have to assume that the interviewer is asking for you to generate an ID on a distribution of servers. But you have to start your answer with a single server. 
Usecases can be many. Any place that gets millions of requests generally gets an ID e.g. logs, or analytics etc.
Assume that IDs need to be unique, they need to be generated fast, and they need to be somewhat comparable i.e. when you see two IDs, you need to be able to tell which one came first. The last one is not a hard requirement, but is nice to have.
Single server: Just unique numbers are enough. If they exceed a Long value, then you can implement your own big number. At one point, you'll have too many requests and thus you won't be able to handle all generation on a single machine.
Discuss how databases can generate auto-increment IDs, which are unique. But those are not distributed.
When generating from multiple machines, attach a time-stamp to each unique id from each machine, and also the machine id. That will guarantee sufficient uniqueness.
Discuss the need to keep all servers on a single time. NTP is a standard way to do that.
ID is a frequent operation, and many others are dependent on it, so discuss the need for low network latency, low disk latency (or zero disk latency). 


Reading pointers:



A history of UUID generation: https://segment.com/blog/a-brief-history-of-the-uuid/
Stackoverflow Discussion: http://stackoverflow.com/questions/2671858/distributed-sequence-number-generation
Snowflake: https://blog.twitter.com/2010/announcing-snowflake
Less useful but still good: https://www.slideshare.net/davegardnerisme/unique-id-generation-in-distributed-systems 

Design Request Counters (hit counters) (Free Form)
-------------------------------------------------------
Design request counters (hit counters)



Count # of visitors in past 1 minute [or 5 minutes, hour, all of the above]



Points to remember



Understand the use of a Circular buffer
Concurrency is important. Locking is fine for low volume. For higher volume, you have to do do writes asynchronously.
When a single machine can't handle it, then use multiple machines. This problem at multiple machines is an entirely different design problem (See Design of Distributed Counters)


Reading pointers:



http://stackoverflow.com/questions/17562089/how-to-count-number-of-requests-in-last-second-minute-and-hour
http://stackoverflow.com/questions/18396452/design-a-datastructure-to-return-the-number-of-connections-to-a-web-server-in-la
http://prismoskills.appspot.com/lessons/System_Design_and_Big_Data/Chapter_03_-_Count_requests_in_last_second_and_hour.jsp



(e)Commerce Website (Free Form)
-------------------------------------------------------
Design an eCommerce website



This question is no different from designing a general website that can handle scale. There is nothing fancy about eCommerce.



Most important thing to clarify with the interviewer here, is which direction they are expecting:



- Do they expect an object modeling design?

- Do they expect you to do architectural scaling e.g. discussing how you'll maintain availability?



If it is the latter, then it's a very standard answer like that of designing a cache i.e. sharding and the discussions should focus on availability with eventual consistency. 
If it's object modeling, then your answer should focus on modeling entities like Products, Buyers, Sellers, etc. 


Reading pointers:



No good ones. Not required either. It's just old wine in a new bottle.

Recently Viewed Items (Free Form)
-------------------------------------------------------
Design product view history feature for full-featured high-traffic eCommerce website like Amazon.com



Use case : user comes to Amazon, browses a number of products, users goes back to home page : display all N recently viewed items

Define API/Object Model
Backend service has to store all data in memory : no database available
Write an efficient data structure/algorithm that is able to process updates in o(1) time and retrieve history in o(n) time, where n is number of recently viewed items

Social Gaming (Free Form)
-------------------------------------------------------
Design a social gaming site like Playfish or Farmville



At its peak, Playfish had 10MM daily active users on its games. The games are primarily played on social platforms like Facebook. (EA bought Playfish for $300MM, but that's besides the point)
Design the system with social gaming in mind. : ability to build multiple different types of social games, at scale low latency on client is important


Reading Pointers:



http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html
http://highscalability.com/blog/2010/2/8/how-farmville-scales-to-harvest-75-million-players-a-month.html



Log Search (Free Form)
-------------------------------------------------------
Design a log-searching web application



Thousands of app servers are writing application logs
Ability for a user to use a web interface to search in real time across all app servers
I am looking for core pieces that you would need to build for this platform so that your solution scales
It should be scalable, but also "near" realtime


Reading Pointers:



None yet


Design Google Maps (Free Form)
-------------------------------------------------------
Unless you have background in maps, you're expected to deliver a high-level design.



Reading



This is a very old article, within a few months of Google Maps launching. The author owns a related company. Does a pretty good and concise job of describing the V1: https://alistapart.com/article/takecontrolofyourmaps 
Someone's take on what the architecture probably looked like in 2015: http://massivetechinterview.blogspot.in/2015/10/google-map-architecture.html
Somone's take on back of the envelope resource estimation of that application: https://prismoskills.appspot.com/lessons/System_Design_and_Big_Data/Chapter_07_-_Designing_Google_Maps.jsp
R-Tree, in context of Geo Spatial indexing: https://en.wikipedia.org/wiki/R-tree


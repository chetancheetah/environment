Billionth Car (Free Form)
-------------------------
Design a system such that 100 billionth visitor on Google, gets a prize in raffle



i.e. when you think about it, you realize that they are looking for a good method of counting in a distributed manner. 



Distributed counting is a hard problem. Not hard as in not solvable, but hard as in "I didn't realize it can become so complicated just to count!" hard.



Reading pointers:



Canonical answer (CRDT)
Reasonably acceptable answer (a bit hand-wavy, but conveys that you know enough): See 'Sharded Counters' in this article http://highscalability.com/blog/2009/2/18/numbers-everyone-should-know.html
Lazy answer: Use a Distributed KV Store that does this: http://blog.memsql.com/high-speed-counters/ 


In practical systems, this will be mixed with existing data pipelines:



How FB does it: http://highscalability.com/blog/2011/3/22/facebooks-new-realtime-analytics-system-hbase-to-process-20.html
How Twitter does it: https://www.slideshare.net/kevinweil/rainbird-realtime-analytics-at-twitter-strata-2011/40-Multiple_Formulas_So_far_we 


(For the adventurous) Research paper: http://arxiv.org/pdf/1307.3207v1.pdf




Trending Topics (Free Form)
-------------------------
How would you design "Trending topics", on websites like Twitter or Facebook? We need to do it reasonably realtime. 



Reading:



 https://stackoverflow.com/questions/787496/what-is-the-best-way-to-compute-trending-topics-or-tags This one is very good. Please be sure to follow the links from there. 
An excellent pedantic take on this is here: https://www.slideshare.net/arunkejariwal/real-time-analytics-algorithms-and-systems  
From horse's mouth, where Twitter describes their own algorithm: https://blog.twitter.com/official/en_us/a/2015/trend-detection-social-data.html 
Here are some good answers to a similar question from Quora: https://www.quora.com/What-tools-algorithms-or-data-structures-would-you-use-to-build-a-Trending-Topics-algorithm-for-a-high-velocity-stream?q=trending+algorithm 
From the Quora link, here is an intriguing approach: https://www.igvita.com/2010/01/06/flow-analysis-time-based-bloom-filters/ 


Idea is to recognize that:



This problem can get too complex. Depending on the context, it's important to define what does trending mean. Is it just by frequency of occurrence, or are there other things like influencers etc.
Recognize that it needs an "algorithm" to be applied to incoming news topic. There are many different such algorithms. Read about them before the interview, but don't get lost in the weeds. Use #1 to reign in the requirements. HackerNews algorithm for example, works quite well. It's simplistic, but powerful because they reign in the use-cases.

Design a Ride-Sharing service (Free Form)
-------------------------
Design a real time marketplace like Uber



i.e. consumers requesting rides to get them from point A to point B need to be matched up with drivers available. This problem has commonalities with the problem of designing a messenger service.



Reading Pointers:



http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html
https://www.infoq.com/presentations/uber-market-platform
https://www.infoq.com/br/presentations/scaling-uber-with-nodejs#downloadPdf


[If this problem was done in the class, and in an unlikely event that there is a conflict between what they taught and with what is given here, please follow what the instructor taught]



News Feed (Free Form)
-------------------------
Design News Feed of a high-activity social media site like Facebook



Design capability for each user to have a wall and for friends to post on the wall
What are the issues you would encounter when you need to scale this news feed to millions of users


Reading pointers: 



http://www.quora.com/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed 
http://www.quora.com/Software-Engineering-Best-Practices/What-are-the-best-practices-for-building-something-like-a-News-Feed


Time Series DB (Free Form)
-------------------------
Design a Time Series Database



Examples of time series values are data points spit out by monitoring and logging services. Periodic values, either single or key-value pairs. Usual queries are aggregate queries e.g. How many times in last 5 minutes did this request take more than 1s?



In theory, any database can be used to store time-series values. But one needs to think hard about how to design that schema. There are some OSS that are tuned just for time-series data e.g. OpenTSDB. 



Reading pointers: 



1. List of possible requirements of a TSDB

https://softwareengineering.stackexchange.com/questions/269590/how-to-efficiently-store-big-time-series-data
https://www.xaprb.com/blog/2014/06/08/time-series-database-requirements/


2. Optimizing a Relational Database for Time Series Data 

https://www.youtube.com/watch?v=X4TfveHzBwM (Short, 5 minute video, but lays the foundation well)


3. Using a columnar database as TSDB

https://medium.com/@hellomichibye/column-oriented-database-draft-part-2-21199a2de18a (A little cursory, but sets the foundation well)


4. Cassandara for Time-series Data

https://academy.datastax.com/resources/getting-started-time-series-data-modeling
http://www.datastax.com/dev/blog/advanced-time-series-with-cassandra


5. Mongo Schema for a TSDB

https://www.mongodb.com/blog/post/schema-design-for-time-series-data-in-mongodb


 6. An analysis by an engineer who works in a company that uses a TSDB as their core product:

http://jmoiron.net/blog/thoughts-on-timeseries-databases

